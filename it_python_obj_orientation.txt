Python - Object Orientation

- class definition

    class Employee:
        pass # way to leave class empty

    emp_1 = Employee()
    emp_2 = Employee()

    emp_1.first = 'Corey'
    emp_1.last = 'Schafer'
    emp_1.email = 'Corey_Schafer@company.com'
    emp_1.pay = 50000

    emp_2.first = 'Test'
    emp_2.last = 'User'
    emp_2.email = 'test_user@company.com'
    emp_2.pay = 70000

- initializer, instance variables
    class Employee:
        def __init__(self, first, last, pay): # set instance variables
            self.first = first
            self.last = last
            self.pay = pay
            self.email = self.first + '_' + self.last + '@company.com'        
        
    emp_1 = Employee('Corey', 'Schafer', '50000')
    emp_2 = Employee('Test', 'User', '70000') 

- class methods - nee to pass 'self' obligatory

    class Employee:
        def __init__(self, first, last, pay):
            self.first = first
            self.last = last
            self.pay = pay
            self.email = self.first + '_' + self.last + '@company.com'        

        def fullname(self):
            return '{} {}'.format(self.first, self.last)
        
    emp_1 = Employee('Corey', 'Schafer', '50000')
    emp_2 = Employee('Test', 'User', '70000')

    print(emp_1.fullname())
    Employee.fullname(emp_1) # does the same

- class variable 

    class Employee:

        raise_amount = 1.04

        def __init__(self, first, last, pay):
            self.first = first
            self.last = last
            self.pay = pay
            self.email = self.first + '_' + self.last + '@company.com'        

        def fullname(self):
            return '{} {}'.format(self.first, self.last)
        
        def apply_rates(self):
            self.pay = int(self.pay * Employee.raise_amount) # alt: self.raise_amount

    print(emp_1.__dict__) # namespace
    # first looks if self.raise_amount exists > if not: take class variable Employee.raise_amount
    # take self.raise_amount > possibility to use/set instance variable
    # also good for subclasses
    # class variable good if want value to stay global! don't want it to be overwritten

- regular methods - class methods - static methods

    class Employee:

        raise_amount = 1.04

        def __init__(self, first, last, pay):
            self.first = first
            self.last = last
            self.pay = pay
            self.email = self.first + '_' + self.last + '@company.com'        

        def fullname(self): # regular method
            return '{} {}'.format(self.first, self.last)
        
        def apply_rates(self):
            self.pay = int(self.pay * Employee.raise_amount) # alt: self.raise_amount

        @classmethods # decorator
        def set_raise_amt(cls, amount)
            cls.raise_amt = amount

        @classmethods # alternative contructor
        def from_string(cls, emp_str):
            first, last, pay = emp_str.split.split('-')
            cls(first, last, pay)

        # static methods don't pass anything - if you don't need 'self' or 'cls'
	# don't act on instance of class
        @staticmethod
        def is_workday(day):
            if day.weekday() == 5 of day.weekday() == 6:
                return False
            return True

    import datetime

    emp_1 = Employee('Corey', 'Schafer', '50000')
    emp_2 = Employee('Test', 'User', '70000')

    Employee.set_raise_amt(1.05)

    print(Employee.raise_amt)
    print(emp_1.raise_amt)
    print(emp_2.raise_amt)

    # changes as well class variable
    emp_1.set_raise_amt(1.05)

    print(Employee.raise_amt)
    print(emp_1.raise_amt)
    print(emp_2.raise_amt)

    emp_str_1 = 'John-Doe-70000'
    emp_str_2 = 'Tomy-Lee-80000'
    Employee.from_string(emp_str_1)
 
    my_date = datetime.date(2016, 7, 11)
    print(Employee.is_workday(my_date))

- inheritance - subclasses - overwriting - ...

    class Developer(Employee)
        pass

    dev_1 = Developer('Corey', 'Schafer', 50000)
    dev_2 = Developer('Test', 'User', 70000)

    print(help(Developer)) # show inheritance of obj/methods/attributes

    class Developer(Employee) # change/customize subclass
        raise_amt = 1.10

        def __init__(self, first, last, pay, prog_lang):
            super.__init__(fist, last, pay)
            self.prog_lang = prog_lang

    dev_1 = Developer('Corey', 'Schafer', 50000, 'Python')
    dev_2 = Developer('Test', 'User', 70000, 'JavaÄ)

    print(dev_1.email)
    print(dev_1.prog_lang)

    class Manager(Employee)

        def __init__(self, first, last, pay, employees=None):
            super.__init__(fist, last, pay)
            if employees is None:
                self.employees = []
            else:
                self.employees = employee

        def add_emp(self, emp):
            if emp not in self.employeed:
                self.employee.append(emp) 

        def add_emp(self, emp):
            if emp in self.employeed:
                self.employee.remove(emp) 

        def print_emp(self):
            for emp in self.employeed:
                print('-->', emp.fullname())

    dev_1 = Developer('Corey', 'Schafer', 50000, 'Python')
    dev_2 = Developer('Test', 'User', 70000, 'JavaÄ)
    mgr_1 = Manager('Sue', 'Smith', 90000, [dev_1]) 

    # several tests
    print(isinstance(mgr_1, Manager))
    print(isinstance(mgr_1, Employee))
    print(isinstance(mgr_1, Developer))

    print(issubclass(Manager, Developer))

- special (magic/dunder) methods - eg operator overloading - dunder -> double underscores

    print(1 + 2)
    print('a' + 'b')
    print(emp_1)

    # most often used: __init__, __repr__, __str__

    def __repr__(self) # -> repr(emp_1) - for "print(testInstance)"
        return "Employee('{}‘, ‘{}‘, {})".format(self.first, self.last, self.pay)

    def __str__(self) # -> str(emp_1) more readable - if not implemented: fallback is repr method
        return '{} - {}'.format(self.fullname(), self.email)

    def __add__(self, other):
        return self.pay + other.pay

    def __len__(self):
        return len(self.fullname())

    print(emp_1 + emp_2) # adds two salaries
    print(len(emp_1)

- property decorators - setters/getters/deleters

    class Employee:

        def __init__(self, first, last):
            self.first = first
            self.last = last

        @property
        def email(self): 
            return '{}.{}@company.com'.format(self.first, self.last)

        @property
        def fullname(self): 
            return '{} {}'.format(self.first, self.last)

        @fullname.setter
        def fullname(self, name):
            first, last = name.split(' ')
            self.first = first
            self.last = last

        @fullname.deleter
        def fullname(self):
            print('Delete Name!')
            self.first = None
            self.last = None
 
    emp_1 = Employee('John', 'Smith')
    emp_1.fullname = 'Corey Schafer'
    print(emp_1.email)
    print(emp_1.fullname)
    del emp_1.fullname
